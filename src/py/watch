#!/usr/bin/env clisp
; vim: lisp:syntax=lisp:ts=4 sw=4 sts=4 expandtab:cindent:formatoptions+=cro 


;; magic lisp functions that do most of the work
(defun sys-compile(x) 
  "read anything from a string, return symbol,float, int as appropraite"
   (read-from-string x))

(defun sys-next (f) 
   "reading the next line has a silly syntax, given to
    us courtery of Common LISP. I hite this silliness inside 'next'"
   (read-line f nil))

;; macros that extend lisp
(defmacro if-it (test then &optional else)
  `(let ((it ,test))
     (if it ,then ,else)))

(defmacro when-it (test &rest then)
  `(let ((it ,test))
     (if it (progn ,@then))))

;; filters
(defun str->lst (str &optional 
                     (sep #\,) (start 0) 
                     (fn #'read-from-string))
 "Seperate str into a list, seperated on sep. Filter thru fn"
 (labels 
    ((worker (&optional (start 0))
       (if-it (position sep str :start start)
              (cons (subseq str start it) 
                    (worker (1+ it)))
              (list (subseq str start)))))
    (mapcar fn (worker))))

(defun file->lines (&optional f)
 "Return one item per line in file f. "
 (if-it (sys-next f)
        (cons it 
        (file->lines f))))

(defun show (fmt lst &optional (digits 5)) 
   "print a list where integers get no zeros, floats get 5"
   (labels ((pretty(arg)
                (cond ((not (numberp arg))   
					   arg)
                      ((= (round arg) arg)   
					   (round arg))
                      (t (float (/ (round (* arg (expt 10 digits)))
                                                 (expt 10 digits)))))))
     (format t fmt (mapcar #'pretty lst))))

;; main
(defun watch (fmt lst &optional b4 (n 0) &aux it)
  "Print a lst. Don't print cells that are unchanged
   from the same cell in the previous item in the list"
  (labels ((diff (x y) (if (equalp x y) "." y)))
    (when-it (car lst)
             (show fmt (if (> n 1)
                           (mapcar #'diff b4 it)
                           it))
              (watch fmt (cdr lst) it (1+ n)))))

;; sample call
(watch "~{~9@A ~}~%" 
       (mapcar #'str->lst (file->lines)))
